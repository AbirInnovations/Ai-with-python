1....................................Binary.............................................


class Node:
    # Constructor to create a new node
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

# A utility function to insert a new node with the given key in the BST
def insert(root, key):
    if root is None:
        # If the tree is empty, return a new node as the root
        return Node(key)

    if key < root.key:
        # If the key is smaller than the current node's key,
        # recursively insert it in the left subtree
        root.left = insert(root.left, key)
    elif key > root.key:
        # If the key is greater than the current node's key,
        # recursively insert it in the right subtree
        root.right = insert(root.right, key)

    # Return the root node (unchanged)
    return root

# Utility function to search a key in the BST
def search(root, key):
    if root is None or root.key == key:
        # Base Cases: root is None (key not found) or key is present at root
        return root

    if key < root.key:
        # If the key is smaller than the current node's key,
        # recursively search in the left subtree
        return search(root.left, key)
    else:
        # If the key is greater than the current node's key,
        # recursively search in the right subtree
        return search(root.right, key)

# Driver Code
if __name__ == '__main__':
    root = None
    root = insert(root, 50)
    insert(root, 30)
    insert(root, 70)
    insert(root, 20)
    insert(root, 40)
    insert(root, 60)
    insert(root, 80)

    # Key to be found
    key_to_find = 25

    # Searching in a BST
    if search(root, key_to_find) is None:
        print(key_to_find, "not found")
    else:
        print(key_to_find, "found")

    key_to_find = 60

    # Searching in a BST
    if search(root, key_to_find) is None:
        print(key_to_find, "not found")
    else:
        print(key_to_find, "found")

2.....................................Heap.........................................................

import heapq

def min_heapify(A, k):
    """
    Function to maintain the min-heap property at a given index 'k' in the list 'A'.
    """
    l = left(k)
    r = right(k)
    smallest = k

    if l < len(A) and A[l] < A[k]:
        # If the left child is smaller than the current node, update 'smallest' index
        smallest = l

    if r < len(A) and A[r] < A[smallest]:
        # If the right child is smaller than the current node, update 'smallest' index
        smallest = r

    if smallest != k:
        # If 'k' is not the smallest among 'k', 'left(k)', and 'right(k)', then swap the elements
        A[k], A[smallest] = A[smallest], A[k]
        min_heapify(A, smallest)

def max_heapify(A, k):
    """
    Function to maintain the max-heap property at a given index 'k' in the list 'A'.
    """
    l = left(k)
    r = right(k)
    largest = k

    if l < len(A) and A[l] > A[k]:
        # If the left child is greater than the current node, update 'largest' index
        largest = l

    if r < len(A) and A[r] > A[largest]:
        # If the right child is greater than the current node, update 'largest' index
        largest = r

    if largest != k:
        # If 'k' is not the largest among 'k', 'left(k)', and 'right(k)', then swap the elements
        A[k], A[largest] = A[largest], A[k]
        max_heapify(A, largest)

def left(k):
    """
    Function to return the index of the left child of a given index 'k'.
    """
    return 2 * k + 1

def right(k):
    """
    Function to return the index of the right child of a given index 'k'.
    """
    return 2 * k + 2

def build_min_heap(A):
    """
    Function to build a min-heap from the list 'A'.
    """
    n = len(A)
    for k in range(n // 2 - 1, -1, -1):
        # Start from the last parent node and min_heapify each parent node
        min_heapify(A, k)

def build_max_heap(A):
    """
    Function to build a max-heap from the list 'A'.
    """
    n = len(A)
    for k in range(n // 2 - 1, -1, -1):
        # Start from the last parent node and max_heapify each parent node
        max_heapify(A, k)

# Example usage for min-heap
min_heap = [7, 3, 1, 5, 9, 4]
build_min_heap(min_heap)
print("Min-Heap:", min_heap)  # Output: Min-Heap: [1, 3, 4, 5, 9, 7]

# Example usage for max-heap
max_heap = [3, 9, 2, 1, 4, 5]
build_max_heap(max_heap)
print("Max-Heap:", max_heap)  # Output: Max-Heap: [9, 4, 5, 1, 3, 2]
