def merge_sort(arr):
    # 0 1
    if len(arr) <= 1:
        return arr

    # two halves
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]

    # sort the two halves
    left_half = merge_sort(left_half)
    right_half = merge_sort(right_half)

    # Merge halves
    return merge(left_half, right_half)

def merge(left, right):
    merged = []  # To store 
    left_index = 0   
    right_index = 0  
    # Compare elements from both halves 
    while left_index < len(left) and right_index < len(right):
        if left[left_index] <= right[right_index]:
            merged.append(left[left_index])
            left_index += 1
        else:
            merged.append(right[right_index])
            right_index += 1

    # remaining 
    while left_index < len(left):
        merged.append(left[left_index])
        left_index += 1

    # remaining 
    while right_index < len(right):
        merged.append(right[right_index])
        right_index += 1

    return merged


arr = [9, 5, 1, 6, 8, 10, 3, 4]
sorted_arr = merge_sort(arr)
print(sorted_arr)
