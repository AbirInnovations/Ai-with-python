..............................Minimax.............................................
ID-21-45009-2
Irtiza Ahsan Abir


class TreeNode:
    def __init__(self, value_or_values):
        if isinstance(value_or_values, int):
            self.values = [value_or_values]
        else:
            self.values = value_or_values
        self.left = None
        self.right = None

def construct_game_tree(node, depth, is_maximizing):
    # Base case: If depth is 0, stop constructing the tree
    if depth == 0:
        return

    if is_maximizing:
        # If it's a maximizing level, create a left child with the maximum value from the current node's values
        max_value = max(node.values)
        node.left = TreeNode(max_value)
        # Recurse with the left child and switch to minimizing level (is_maximizing = False)
        construct_game_tree(node.left, depth - 1, False)
    else:
        # If it's a minimizing level, create a right child with the minimum value from the current node's values
        min_value = min(node.values)
        node.right = TreeNode(min_value)
        # Recurse with the right child and switch back to maximizing level (is_maximizing = True)
        construct_game_tree(node.right, depth - 1, True)

def get_minmax_value(root, depth, is_maximizing):
    # Base case: If depth is 0, return the maximum value if it's a maximizing level, or the minimum value if it's a minimizing level
    if depth == 0:
        return max(root.values) if is_maximizing else min(root.values)

    if is_maximizing:
        # If it's a maximizing level, return the maximum value from the left child (minimizing level)
        return get_minmax_value(root.left, depth - 1, False)
    else:
        # If it's a minimizing level, return the minimum value from the right child (maximizing level)
        return get_minmax_value(root.right, depth - 1, True)

def print_binary_tree(node, level=0, prefix="Root: "):
    # Print the node's values along with the current level and prefix
    if node is not None:
        print(" " * (level * 4) + prefix + str(node.values))
        # Recurse with the left child, updating the level and prefix
        print_binary_tree(node.left, level + 1, "Left: ")
        # Recurse with the right child, updating the level and prefix
        print_binary_tree(node.right, level + 1, "Right: ")

if __name__ == "__main__":
    # Change the leaf values of the tree as desired
    leaf_values = [7, 8, 2, 12, 4, 10, 6, 9]
    depth = 3  # Adjust the depth as needed

    root = TreeNode(leaf_values)
    construct_game_tree(root, depth, True)

    print("Binary Tree:")
    print_binary_tree(root)

    minmax_value = get_minmax_value(root, depth, True)
    print("Minimax value at the root node:", minmax_value)
